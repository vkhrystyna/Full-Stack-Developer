npm install node-rdkafka

create mew folder kafka and files consumer.ts, producer.ts

in consumer.ts

import {KafkaConsumer, ConsumerGlobalConfig} from "node-rdkafka";

class StationConsumer extends KafkaConsumer {
    constructor () {
        const config:ConsumerGlobalConfig = {
            'group.id': 'kafka',
            'metadata.broker.list': 'localhost:9092'
        }
        super(config, {})
        super.on("ready", () =>{
            super.subscribe(['station'])
            super.consume()
            console.log('Listen station')
        }).on("rebalance", ()=> console.log('rebalance kafka'))
            .on("data", ({value})=>{
                console.log(JSON.parse(value.toString()),`Consumer data`)
            })
    }
    start() {
        super.connect();
    }

    close() {
        super.disconnect();
    }
}

export const stationConsumer = new StationConsumer()


in producer.ts

import {Producer, ProducerGlobalConfig} from "node-rdkafka";

class StationProducer extends Producer {
    constructor() {
        const config:ProducerGlobalConfig = {
            'metadata.broker.list': 'localhost:9092'
        };
        super(config, {})
        super
            .on("ready", () => console.log("startproducer"))
            .on("event.error", (error) => {
                throw error
            });
    }
    start() {
        super.connect();
        super.on("ready", () => console.log("connect"))
    }

    close() {
        super.disconnect();
    }

    sendStation(station){
        if (super.isConnected()){
            try{
                super.produce('station', null, Buffer.from(JSON.stringify(station)));
                console.log('Report sent to the consumer');
            }catch (error) {
                console.log(error);
            }
        } else {
            console.log('Produsec is not connected')
            setTimeout( () =>this.sendStation(station), 1000)
        }
    }
}
const stationProducer = new StationProducer()

export {stationProducer}


in server.ts

connection
stationConsumer.start();
    stationProducer.start();

in station.ts додаємо в одну з функцій

stationProducer.sendStation(stationBody);


create docker-compose.yml

version: "3"
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: 'kafka'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
